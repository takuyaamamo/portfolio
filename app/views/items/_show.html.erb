<!-- Modalボディ部分 -->
<%= form_with url: sessioncreate_path do |form| %>
<% stock = Stock.find_by(item_id: item.id).stock_count %>
  <div class="modal-body">
    <div class="card">
      <% if item.post_images.present? %>
        <% item.post_images.each do |image| %>
          <%= attachment_image_tag image, :image, :fill, 600, 600, width: "100%" %>
        <% end %>
      <% else %>
        <%= image_tag '/images/no_image.jpg', width: "100%" %>
      <% end %>
      <div class="card-body">
        <h5 class="card-title" id="item_name"><%= item.item_name %></h5>
        <p class="card-text"><%= item.item_description %></p>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item">
          1個
          <div class="inline-block"><%= tax_included %></div>円（税込み）
        </li>
        <li class="list-group-item">
          <!-- ネストしたフォーム下部javascript管理 -->
          <%= form.fields_for :purchased_item do |purchased_item| %>
          <%= purchased_item.number_field :item_id, hidden: true, value: item.id %>
          <div class="inline-block count-size-textalign">
            <button id="minus" type="button" class="btn btn-primary rounded-circle p-0" style="width:2rem;height:2rem;">-</button>
            <% if stock == 0 %>
              <div id="item_count_div" class="inline-block count-margin">0</div>
            <% else %>
              <div id="item_count_div" class="inline-block count-margin">1</div>
            <% end %>
            <%= purchased_item.number_field :item_count, hidden: true, id: "item_count_input" %>
            <button id="plus" type="button" class="btn btn-primary rounded-circle p-0" style="width:2rem;height:2rem;">＋</button>
            <% if admin_signed_in? %>
              <div class="inline-block">
                理論在庫<p class="inline-block text-right">
                  <%= stock %>
                </p>点
              </div>
            <% else %>
              <div class="inline-block">
                <% if stock == 0 %>
                  <p id="lacking-stock" class="inline-block text-right">在庫がありません</p>
                <% else %>
                  <p id="lacking-stock" class="inline-block text-right"></p>
                <% end %>
              </div>
            <% end %>
          </div>
        <% end %>
      </li>
      <li class="list-group-item">
        合計
        <div id="total_price_div" class="inline-block"><%= tax_included %></div>円（税込み）
      </li>
    </ul>
    <% unless stock == 0 %>
      <div class="card-body mx-auto" id="pay">
        <div id='notice' style="display:none;"></div>
        <button class="button-remove-background">
          <span class="apple-pay-size">
            <div id="apple-pay-button-wrapper" style="display:none;">
              <div id="apple-pay-button" class="apple-pay-button apple-pay-button-black"></div>
            </div>
          </span>
        </button>
        <div><p id="result"></p></div>
      </div>
    <% end %>
  </div>
</div>
<!-- Modalボディ部分終了 -->
<!-- Modalフッター部分 -->
<div class="modal-footer">
  <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
  <% if admin_signed_in? || (!admin_signed_in? && stock >= 1) %>
    <%= form.submit "カートに追加", class: "btn btn-primary" %>
  <% end %>
</div>
<% end %>

<script type="text/javascript">
// ========================商品ごとのカウント制御===================================
$("#minus").click(function () {
  // rubyから商品金額税込みを取得
  const item_price = parseInt(<%= tax_included.to_json %>);
  // lacking-stock要素を取得
  const lacking_stock = $("#lacking-stock");
  // pay要素を取得
  const pay = $("#pay");
  // item_count_div要素を取得、購入数は更新される
  const item_count_div = $("#item_count_div");
  // item_count_divの現在の購入数を取得
  let item_count = parseInt(item_count_div.text());
  // item_count_divの要素を取得、合計金額は更新される
  const total_price_div = $("#total_price_div");
  // total_price_divの合計金額を取得
  let total_price = parseInt(total_price_div.text());
  // item_count_inputの要素を取得する
  const item_count_input = $("#item_count_input");
  if (total_price <= item_price && item_count == 0) {
    pay.hide();
    console.log("これ以上少なく出来ません");
  } else {
    total_price = total_price - item_price;
    item_count -= 1;
    item_count_div.text(item_count);
    item_count_input.val(item_count);
    total_price_div.text(total_price);
    lacking_stock.text("");
  }
});
$("#plus").click(function () {
  // rubuから在庫数を取得
  const item_stock = <%= Stock.find_by(item_id: item.id).stock_count.to_i.to_json %>
  // rubyから商品金額税込みを取得
  const item_price = parseInt(<%= tax_included.to_json %>);
  // lacking-stock要素を取得
  const lacking_stock = $("#lacking-stock");
  // pay要素を取得
  const pay = $("#pay");
  // item_count_div要素を取得、購入数は更新される
  const item_count_div = $("#item_count_div");
  // item_count_divの現在の購入数を取得
  let item_count = parseInt(item_count_div.text());
  // item_count_divの要素を取得、合計金額は更新される
  const total_price_div = $("#total_price_div");
  // total_price_divの合計金額を取得
  let total_price = parseInt(total_price_div.text());
  // item_count_inputの要素を取得する
  const item_count_input = $("#item_count_input");
  if (item_count == item_stock && <%= admin_signed_in?.to_json %> == false) {
    lacking_stock.text("在庫がありません");
    console.log("在庫がありません");
  } else {
    total_price = total_price + item_price;
    item_count += 1;
    item_count_div.text(item_count);
    item_count_input.val(item_count);
    total_price_div.text(total_price);
    pay.show();
  }
});
// ============================================================================ ============================applepay制御=====================================
Payjp.setPublicKey("<%= ENV['PAYJP_TEST_PUBLIC_KEY'] %>");
// applePayが可能な端末であるか確認
function checkAvailabilityHandler(available) {
  if (available) {
    document.getElementById('apple-pay-button-wrapper').style.display = 'block';
    document.getElementById('notice').style.display = 'none';
  } else {
    document.getElementById('apple-pay-button-wrapper').style.display = 'none';
    document.getElementById('notice').style.display = 'block';
  }
}
function onClick() {
  var paymentRequest = {
    countryCode: 'JP',
    currencyCode: 'JPY',
    requiredShippingAddressFields: {
      "emailAddress",
      "name",
      "phoneNumber",
      "phoneticName",
      "postalAddress"
    },
    total: {
      label: $("#item_name").text(),
      amount: $("#total_price_div").text()
    }
  };
  var session = Payjp.applePay.buildSession(paymentRequest, function (result) {
    console.log(result);
    // サーバーにPAY.JPのトークンを渡して、決済完了後にApplePayのペイメントシートを閉じる例
    $.post("/your_server_endpoint", {token: result.token.id}).done(function () {
      session.completePayment(ApplePaySession.STATUS_SUCCESS);
    }).fail(function () {
      session.completePayment(ApplePaySession.STATUS_FAILURE);
    });
    document.getElementById('result').innerText = 'Token = ' + result.token.id;
    session.completePayment(ApplePaySession.STATUS_SUCCESS);
  }, function (e) {
    console.error(e);
    alert(e.error.message);
  });
  session.begin();
}
document.getElementById('apple-pay-button').addEventListener('click', onClick);
Payjp.applePay.checkAvailability(checkAvailabilityHandler);
// ======================================================================
</script>
